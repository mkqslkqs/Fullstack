package com.taskmanagementapp.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private JwtRequestFilter jwtRequestFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º CORS (–¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ñ—Ä–æ–Ω—Ç–∞ –∏ –±—ç–∫–∞)
                .cors(withDefaults())

                // ‚ùå –û—Ç–∫–ª—é—á–∞–µ–º CSRF (–¥–ª—è REST API —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ)
                .csrf(AbstractHttpConfigurer::disable)

                // üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
                .authorizeHttpRequests(auth -> auth
                        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                        .requestMatchers("/api/auth/**", "/api/users/register", "/api/users/login").permitAll()

                        // –ü—É–±–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
                        .requestMatchers("/api/tasks/public/**").permitAll()

                        // –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å JWT
                        .requestMatchers("/api/users/**", "/api/tasks/**").authenticated()

                        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ‚Äî —Ç–æ–∂–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        .anyRequest().authenticated()
                )

                // üö´ –ë–µ–∑ —Å–µ—Å—Å–∏–π ‚Äî REST API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å stateless
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                );

        // üîÑ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä JWT –ø–µ—Ä–µ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º Spring Security
        http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    // üß© –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // ‚öôÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ)
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    // üåê –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä React localhost:3000)
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();

        // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000"));

        // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"));

        // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));

        // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–∫–µ–Ω–æ–≤/cookie
        configuration.setAllowCredentials(true);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);

        return source;
    }
}
